// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Management.DataAccess.Concrete.EntityFrameworkCore.Contexts;

#nullable disable

namespace Order.Management.DataAccess.Migrations
{
    [DbContext(typeof(OrderManagementDbContext))]
    partial class OrderManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Order.Management.Core.Concrete.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeletion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(6805),
                            IsActive = 1,
                            Password = "Q1w2E3s",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeletion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Arnavutköy",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(6973),
                            IsActive = 1,
                            Name = "Deniz Tanriverdi"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Esenler",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(6975),
                            IsActive = 1,
                            Name = "Ali Tanriverdi"
                        });
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeletion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7061),
                            Id = 1,
                            IsActive = 1,
                            Quantity = 1.0
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7063),
                            Id = 2,
                            IsActive = 1,
                            Quantity = 2.0
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7064),
                            Id = 3,
                            IsActive = 1,
                            Quantity = 3.0
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 1,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7065),
                            Id = 4,
                            IsActive = 1,
                            Quantity = 1.0
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7065),
                            Id = 5,
                            IsActive = 1,
                            Quantity = 1.0
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 3,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7066),
                            Id = 6,
                            IsActive = 1,
                            Quantity = 2.0
                        });
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfDeletion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("OrderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7197),
                            CustomerId = 1,
                            IsActive = 1,
                            OrderAddress = "Sultangazi"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7199),
                            CustomerId = 2,
                            IsActive = 1,
                            OrderAddress = "Arnavutköy"
                        });
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDeletion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "123456780",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7293),
                            Description = "Tablet",
                            IsActive = 1,
                            Price = 1000m,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "123456781",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7294),
                            Description = "Bilgisayar",
                            IsActive = 1,
                            Price = 9000m,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "123456782",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7295),
                            Description = "Telefon",
                            IsActive = 1,
                            Price = 4000m,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "123456780",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7296),
                            Description = "Tablet",
                            IsActive = 1,
                            Price = 1000m,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "123456781",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7297),
                            Description = "Bilgisayar",
                            IsActive = 1,
                            Price = 9000m,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "123456782",
                            CreationDate = new DateTime(2022, 9, 11, 2, 23, 1, 378, DateTimeKind.Local).AddTicks(7298),
                            Description = "Telefon",
                            IsActive = 1,
                            Price = 4000m,
                            Quantity = 1.0
                        });
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.OrderProduct", b =>
                {
                    b.HasOne("Order.Management.Core.Concrete.Orders", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order.Management.Core.Concrete.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Orders", b =>
                {
                    b.HasOne("Order.Management.Core.Concrete.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Orders", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Order.Management.Core.Concrete.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
